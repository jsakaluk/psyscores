summary(FigA1Fit, fit.measures=TRUE, standardized=TRUE)
#report output with fit measures and standardized estimates#
summary(FigA1Fit, fit.measures=TRUE, standardized=TRUE)
#calculate scores#
FigA1Scores<-lavPredict(FigA1Fit, method="regression")
head(FigA1Scores)
View(hs)
pim <- function(df){
eta <- sprintf("LV =~%s", names(df)[[1]])
upnames <- names(df)
upnames <- upnames[2:length(upnames)]
reg <- sprintf("%s ~a* ", names(df)[[1]])
regs <- gsub(" ", "",paste(reg,paste(upnames, collapse = "+a*")), fixed = T)
a <- "a == -1"
int.list = list()
int.list[[1]] = sprintf("%s ~ 0*1",names(df)[[1]])
for (i in 2:length(names(df))) {
int.list[[i]]=sprintf("%s ~ 1",names(df)[[i]])
}
ints = paste(int.list, collapse = "\n")
lv <- "~~LV"
cor.1 <- gsub(" ", "", paste(paste(upnames, collapse = "+"), lv),   fixed = T)
cor.list <- list()
i1 <- 1
counter <- length(upnames)-1
while (counter > 0) {
name <- sprintf(" ~~%s", upnames[[1]])
upnames <- upnames[2:length(upnames)]
cor.list[[i1]] <- gsub(" ", "", paste(paste(upnames, collapse = "+"), name),   fixed = T)
i1 <- i1+1
counter <- counter-1
}
cors <- paste(cor.list, collapse= "\n")
pim.model <- sprintf("#First item loads on latent variable with loading constrained to 1 by default #\n%s\n\n#All other itmes predict the last item with the same coefficient#\n%s\n\n#constrain the regression coefficient for all items to -1#
%s\n\n#estimate intercepts of all other items, first item intercept is constrained to 0#\n%s\n\n##All predictor items covary with latent variable##\n%s\n%s", eta, regs, a, ints, cor.1, cors)
cat(pim.model,"\n")
model.fit <- lavaan::sem(pim.model, data=df)
return(model.fit)
}
pim.hs <- pim(df)
summary(pim.hs, fit.measures=TRUE, standardized=TRUE)
#report output with fit measures and standardized estimates#
summary(FigA1Fit, fit.measures=TRUE, standardized=TRUE)
View(hs)
lavPredict(FigA1Fit, method="regression", type = "lv")
lavPredict(FigA1Fit, method="regression", type = "ov")
lavPredict(FigA1Fit, method="regression", type = "yhat")
FigA1<-
'
#Last item loads on latent variable with loading constrained to 1 by default #
f1=~x9
f1 ~~1*f1
#All other itmes predict the last item with the same coefficient#
x9~a*x4+a*x5+a*x6+a*x7+a*x8
#constrain the regression coefficient for all items to -1#
a==-1
#estimate intercepts of all other items, last item intercept is constrained to 0#
x4~1
x5~1
x6~1
x7~1
x8~1
x9~0*1
##All predictor items covary with latent variable#
x4+x5+x6+x7+x8 ~~f1
x5+x6+x7+x8 ~~x4
x6+x7+x8~~x5
x7+x8~~x6
x7~~x8
'
#Fit above model#
FigA1Fit<-sem(FigA1, data=hs)
#report output with fit measures and standardized estimates#
summary(FigA1Fit, fit.measures=TRUE, standardized=TRUE)
lavPredict(FigA1Fit, method="regression")
FigA1<-
'
#Last item loads on latent variable with loading constrained to 1 by default #
f1=~x9
#All other itmes predict the last item with the same coefficient#
x9~a*x4+a*x5+a*x6+a*x7+a*x8
#constrain the regression coefficient for all items to -1#
a==-1
#estimate intercepts of all other items, last item intercept is constrained to 0#
x4~1
x5~1
x6~1
x7~1
x8~1
x9~0*1
##All predictor items covary with latent variable#
x4+x5+x6+x7+x8 ~~f1
x5+x6+x7+x8 ~~x4
x6+x7+x8~~x5
x7+x8~~x6
x7~~x8
'
#Fit above model#
FigA1Fit<-sem(FigA1, data=hs)
#report output with fit measures and standardized estimates#
summary(FigA1Fit, fit.measures=TRUE, standardized=TRUE)
#calculate scores#
FigA1Scores<-lavPredict(FigA1Fit, method="regression")
head(FigA1Scores)
#calculate scores#
FigA1Scores<-lavPredict(FigA1Fit, method="bartlett")
head(FigA1Scores)
regression
#calculate scores#
FigA1Scores<-lavPredict(FigA1Fit, method="regression")
head(FigA1Scores)
View(score.tibble)
cor(score.tibble$f1, score.tibble$sum.score)
View(score.tibble)
FigA1<-
'
#Last item loads on latent variable with loading constrained to 1 by default #
f1=~x9
#All other itmes predict the last item with the same coefficient#
x9~a*x4+a*x5+a*x6+a*x7+a*x8
#constrain the regression coefficient for all items to -1#
a==-1
#estimate intercepts of all other items, last item intercept is constrained to 0#
x4~1
x5~1
x6~1
x7~1
x8~1
x9~0*1
##All predictor items covary with latent variable#
x4+x5+x6+x7+x8 ~~f1
x5+x6+x7+x8 ~~x4
x6+x7+x8~~x5
x7+x8~~x6
x7~~x8
'
#Fit above model#
FigA1Fit<-sem(FigA1, data=hs)
#report output with fit measures and standardized estimates#
summary(FigA1Fit, fit.measures=TRUE, standardized=TRUE)
#calculate scores#
FigA1Scores<-lavPredict(FigA1Fit, method="regression")
pim.hs <- pim(df)
FigA1<-
'
#Last item loads on latent variable with loading constrained to 1 by default #
f1=~x9
#All other itmes predict the last item with the same coefficient#
x9~a*x4+a*x5+a*x6+a*x7+a*x8
#constrain the regression coefficient for all items to -1#
a==-1
#estimate intercepts of all other items, last item intercept is constrained to 0#
x4~1
x5~1
x6~1
x7~1
x8~1
x9~0*1
##All predictor items covary with latent variable#
x4+x5+x6+x7+x8 ~~f1
x5+x6+x7+x8 ~~x4
x6+x7+x8~~x5
x7+x8~~x6
x7~~x8
'
#Fit above model#
FigA1Fit<-sem(FigA1, data=df)
#report output with fit measures and standardized estimates#
summary(FigA1Fit, fit.measures=TRUE, standardized=TRUE)
pim.scores<-lavPredict(pim.hs, method="regression")
FigA1Scores<-lavPredict(FigA1Fit, method="regression")
#Fit above model#
FigA1Fit<-sem(FigA1, data=hs)
#report output with fit measures and standardized estimates#
summary(FigA1Fit, fit.measures=TRUE, standardized=TRUE)
#calculate scores#
FigA1Scores<-lavPredict(FigA1Fit, method="regression")
#report output with fit measures and standardized estimates#
summary(FigA1Fit, fit.measures=TRUE, standardized=TRUE)
FigA1<-
'
#Last item loads on latent variable with loading constrained to 1 by default #
f1=~x9
#All other itmes predict the last item with the same coefficient#
x9~a*x4+a*x5+a*x6+a*x7+a*x8
#constrain the regression coefficient for all items to -1#
a==-1
#estimate intercepts of all other items, last item intercept is constrained to 0#
x4~1
x5~1
x6~1
x7~1
x8~1
x9~0*1
##All predictor items covary with latent variable#
x4+x5+x6+x7+x8 ~~f1
x5+x6+x7+x8 ~~x4
x6+x7+x8~~x5
x7+x8~~x6
x7~~x8
'
#Fit above model#
FigA1Fit<-sem(FigA1, data=df)
#report output with fit measures and standardized estimates#
summary(FigA1Fit, fit.measures=TRUE, standardized=TRUE)
FigA1<-'
#Last item loads on latent variable with loading constrained to 1 by default #
f1=~x9
#All other itmes predict the last item with the same coefficient#
x9~a*x4+a*x5+a*x6+a*x7+a*x8
#constrain the regression coefficient for all items to -1#
a==-1
#estimate intercepts of all other items, last item intercept is constrained to 0#
x4~1
x5~1
x6~1
x7~1
x8~1
x9~0*1
##All predictor items covary with latent variable#
x4+x5+x6+x7+x8 ~~f1
x5+x6+x7+x8 ~~x4
x6+x7+x8~~x5
x7+x8~~x6
x7~~x8
'
#Fit above model#
FigA1Fit<-sem(FigA1, data=hs)
#report output with fit measures and standardized estimates#
summary(FigA1Fit, fit.measures=TRUE, standardized=TRUE)
hs<-read.csv(file.choose())
View(hs)
h2.2 <- (select(HolzingerSwineford1939, x4:x9))
View(hs)
View(h2.2)
FigA1<-
'
#Last item loads on latent variable with loading constrained to 1 by default #
f1=~x9
#All other itmes predict the last item with the same coefficient#
x9~a*x4+a*x5+a*x6+a*x7+a*x8
#constrain the regression coefficient for all items to -1#
a==-1
#estimate intercepts of all other items, last item intercept is constrained to 0#
x4~1
x5~1
x6~1
x7~1
x8~1
x9~0*1
##All predictor items covary with latent variable#
x4+x5+x6+x7+x8 ~~f1
x5+x6+x7+x8 ~~x4
x6+x7+x8~~x5
x7+x8~~x6
x7~~x8
'
#Fit above model#
FigA1Fit<-sem(FigA1, data=hs)
#calculate scores#
FigA1Scores<-lavPredict(FigA1Fit, method="regression")
head(FigA1Scores)
#calculate scores#
FigA1Scores<-lavPredict(FigA1Fit, method="regression", append.data = T)
#calculate scores#
FigA1Scores<-as_tibble(lavPredict(FigA1Fit, method="regression", append.data = T))
View(FigA1Scores)
#calculate scores#
FigA1Scores<-as_tibble(lavPredict(FigA1Fit, method="regression", append.data = T))
View(FigA1Scores)
FigA1Scores <- mutate(FigA1Scores, rawsum = x4 + x5 + x6 + x7 + x8 + x9)
cor(FigA1Scores$f1, FigA1Scores$rawsum)
df <- (select(HolzingerSwineford1939, x4:x9))
last <- length(names(df))
eta <- sprintf("LV =~%s", names(df)[[last]])
upnames <- names(df)
upnames <- upnames[1:length(upnames)-1]
reg <- sprintf("%s ~a* ", names(df)[[last]])
regs <- gsub(" ", "",paste(reg,paste(upnames, collapse = "+a*")), fixed = T)
int.list = list()
for (i in 1:last-1) {
int.list[[i]]=sprintf("%s ~ 1",names(df)[[i]])
}
lastm1 = last-1
for (i in 1:lastm1) {
int.list[[i]]=sprintf("%s ~ 1",names(df)[[i]])
}
int.list[[last]] = sprintf("%s ~ 0*1",names(df)[[last]])
ints = paste(int.list, collapse = "\n")
lv <- "~~LV"
cor.1 <- gsub(" ", "", paste(paste(upnames, collapse = "+"), lv),   fixed = T)
cor.list <- list()
i1 <- 1
counter <- length(upnames)-1
while (counter > 0) {
name <- sprintf(" ~~%s", upnames[[1]])
upnames <- upnames[2:length(upnames)]
cor.list[[i1]] <- gsub(" ", "", paste(paste(upnames, collapse = "+"), name),   fixed = T)
i1 <- i1+1
counter <- counter-1
}
cors <- paste(cor.list, collapse= "\n")
pim.model <- sprintf("#First item loads on latent variable with loading constrained to 1 by default #\n%s\n\n#All other itmes predict the last item with the same coefficient#\n%s\n\n#constrain the regression coefficient for all items to -1#
%s\n\n#estimate intercepts of all other items, first item intercept is constrained to 0#\n%s\n\n##All predictor items covary with latent variable##\n%s\n%s", eta, regs, a, ints, cor.1, cors)
pim <- function(df){
last <- length(names(df))
eta <- sprintf("LV =~%s", names(df)[[last]])
upnames <- names(df)
upnames <- upnames[1:length(upnames)-1]
reg <- sprintf("%s ~a* ", names(df)[[last]])
regs <- gsub(" ", "",paste(reg,paste(upnames, collapse = "+a*")), fixed = T)
a <- "a == -1"
lastm1 = last-1
int.list = list()
for (i in 1:lastm1) {
int.list[[i]]=sprintf("%s ~ 1",names(df)[[i]])
}
int.list[[last]] = sprintf("%s ~ 0*1",names(df)[[last]])
ints = paste(int.list, collapse = "\n")
lv <- "~~LV"
cor.1 <- gsub(" ", "", paste(paste(upnames, collapse = "+"), lv),   fixed = T)
cor.list <- list()
i1 <- 1
counter <- length(upnames)-1
while (counter > 0) {
name <- sprintf(" ~~%s", upnames[[1]])
upnames <- upnames[2:length(upnames)]
cor.list[[i1]] <- gsub(" ", "", paste(paste(upnames, collapse = "+"), name),   fixed = T)
i1 <- i1+1
counter <- counter-1
}
cors <- paste(cor.list, collapse= "\n")
pim.model <- sprintf("#First item loads on latent variable with loading constrained to 1 by default #\n%s\n\n#All other itmes predict the last item with the same coefficient#\n%s\n\n#constrain the regression coefficient for all items to -1#
%s\n\n#estimate intercepts of all other items, first item intercept is constrained to 0#\n%s\n\n##All predictor items covary with latent variable##\n%s\n%s", eta, regs, a, ints, cor.1, cors)
cat(pim.model,"\n")
model.fit <- lavaan::sem(pim.model, data=df)
return(model.fit)
}
df <- (select(HolzingerSwineford1939, x4:x9))
pim.hs <- pim(df)
FigA1<-
'
#Last item loads on latent variable with loading constrained to 1 by default #
f1=~x9
#All other itmes predict the last item with the same coefficient#
x9~a*x4+a*x5+a*x6+a*x7+a*x8
#constrain the regression coefficient for all items to -1#
a==-1
#estimate intercepts of all other items, last item intercept is constrained to 0#
x4~1
x5~1
x6~1
x7~1
x8~1
x9~0*1
##All predictor items covary with latent variable#
x4+x5+x6+x7+x8 ~~f1
x5+x6+x7+x8 ~~x4
x6+x7+x8~~x5
x7+x8~~x6
x7~~x8
'
#Fit above model#
FigA1Fit<-sem(FigA1, data=df)
pim.scores<-lavPredict(pim.hs, method="regression")
FigA1Scores<-lavPredict(FigA1Fit, method="regression")
eta <- sprintf("LV =~1*%s", names(df)[[last]])
last <- length(names(df))
eta <- sprintf("LV =~1*%s", names(df)[[last]])
eta <- sprintf("LV =~%s*%s", last, names(df)[[last]])
pim <- function(df, model = "sum"){
last <- length(names(df))
if(model == "sum"){
eta <- sprintf("LV =~1*%s", names(df)[[last]])
}else if(model == "average"){
eta <- sprintf("LV =~%s*%s", last, names(df)[[last]])
}
upnames <- names(df)
upnames <- upnames[1:length(upnames)-1]
reg <- sprintf("%s ~a* ", names(df)[[last]])
regs <- gsub(" ", "",paste(reg,paste(upnames, collapse = "+a*")), fixed = T)
a <- "a == -1"
lastm1 = last-1
int.list = list()
for (i in 1:lastm1) {
int.list[[i]]=sprintf("%s ~ 1",names(df)[[i]])
}
int.list[[last]] = sprintf("%s ~ 0*1",names(df)[[last]])
ints = paste(int.list, collapse = "\n")
lv <- "~~LV"
cor.1 <- gsub(" ", "", paste(paste(upnames, collapse = "+"), lv),   fixed = T)
cor.list <- list()
i1 <- 1
counter <- length(upnames)-1
while (counter > 0) {
name <- sprintf(" ~~%s", upnames[[1]])
upnames <- upnames[2:length(upnames)]
cor.list[[i1]] <- gsub(" ", "", paste(paste(upnames, collapse = "+"), name),   fixed = T)
i1 <- i1+1
counter <- counter-1
}
cors <- paste(cor.list, collapse= "\n")
pim.model <- sprintf("#First item loads on latent variable with loading constrained to 1 by default #\n%s\n\n#All other itmes predict the last item with the same coefficient#\n%s\n\n#constrain the regression coefficient for all items to -1#
%s\n\n#estimate intercepts of all other items, first item intercept is constrained to 0#\n%s\n\n##All predictor items covary with latent variable##\n%s\n%s", eta, regs, a, ints, cor.1, cors)
cat(pim.model,"\n")
model.fit <- lavaan::sem(pim.model, data=df)
return(model.fit)
}
pim.hs.sum <- pim(df, model = "sum")
pim.scores.sum<-lavPredict(pim.hs.sum, method="regression")
pim.hs.avg <- pim(df, model = "average")
pim.scores.avg<-lavPredict(pim.hs.avg, method="regression")
View(df)
standardizedsolution(pim.hs.sum)
summary(pim.hs.sum, fit.measures=TRUE, standardized=TRUE)
pim.scores.sum<-lavPredict(standardizedsolution(pim.hs.sum), method="regression")
cong.hs <- congeneric(df)
congeneric <- function(df){
eta <- sprintf("LV =~ NA*")
lambda <- gsub(" ", "",paste(eta,paste(names(df), collapse = "+")), fixed = T)
psi <- sprintf("LV ~~ 1*LV")
congeneric.model <- sprintf("#Loadings\n%s\n\n#Variances\n%s", lambda, psi)
cat(congeneric.model,"\n")
model.fit <- lavaan::sem(congeneric.model, data=df)
return(model.fit)
}
cong.hs <- congeneric(df)
usethis::use_r(name = "reliability")
usethis::use_test(name = "reliability")
standardizedsolution(cong.hs)
parameterEstimates(cong.hs)
params <- lavaan::standardizedsolution(cong.hs)
loads <- dplyr::select(params, op == "=~")
params <- tibble::as_tibble(lavaan::standardizedsolution(cong.hs))
View(params)
loads <- dplyr::select(params, op == "=~")
loads <- dplyr::select(params, op = "=~")
loads <- dplyr::filter(params, op == "=~")
View(loads)
errors <- dplyr::filter(params, op == "~~")
View(errors)
errors <- errors[-1,]
errors
#H
loads <- dplyr::muatate(loads, I2 = (est.std^2)/(1-est.std^2))
#H
loads <- dplyr::mutate(loads, I2 = (est.std^2)/(1-est.std^2))
View(loads)
sumI2 <- sum(loads$I2)
mind <- 1/sumI2
majd <- 1+mind
H <- 1/majd
loads$est.std^2+errors$est.std
#Omega Total
sumload <- sum(loads$est.std)
sumerror <- sum(errors$est.std)
omegnum <- sumload^2
omegdenom <- omegnum+sumerror
omega.total <- omegnum/omegdenom
print(omega.total)
index <- c("H", "Omega Total")
estimate <- c(H, omega,total)
estimate <- c(H, omega.total)
reliability <- as_tibble(cbind(index, estimate))
View(reliability)
reliability <- function(model){
params <- tibble::as_tibble(lavaan::standardizedsolution(model))
loads <- dplyr::filter(params, op == "=~")
errors <- dplyr::filter(params, op == "~~")
errors <- errors[-1,]
#H
loads <- dplyr::mutate(loads, I2 = (est.std^2)/(1-est.std^2))
sumI2 <- sum(loads$I2)
mind <- 1/sumI2
majd <- 1+mind
H <- 1/majd
#Omega Total
sumload <- sum(loads$est.std)
sumerror <- sum(errors$est.std)
omegnum <- sumload^2
omegdenom <- omegnum+sumerror
omega.total <- omegnum/omegdenom
index <- c("H", "Omega Total")
estimate <- c(H, omega.total)
reliability <- as_tibble(cbind(index, estimate))
return(reliability)
}
rel <- reliability(cong.hs)
View(rel)
parallel <- function(df){
eta <- sprintf("LV =~")
lambda.list = list()
for (i in 1:length(names(df))) {
lambda.list[[i]]=sprintf("l%s*%s",1, names(df)[[i]])
}
lambda = gsub(" ", "",paste(eta,paste(lambda.list, collapse = "+")), fixed = T)
theta.list = list()
for (i in 1:length(names(df))) {
theta.list[[i]]=sprintf("%s ~~ theta*%s",names(df)[i], names(df)[i])
}
theta = paste(theta.list, collapse = "\n")
parallel.model <- sprintf("#Loadings\n%s\n\n#Residuals\n%s", lambda, theta)
cat(parallel.model,"\n")
model.fit <- lavaan::sem(parallel.model, data=df)
return(model.fit)
}
par.hs <- parallel(df)
rel <- reliability(cong.par)
rel.cong <- reliability(cong.hs)
rel.par <- reliability(par.hs)
View(rel.par)
View(rel.cong)
